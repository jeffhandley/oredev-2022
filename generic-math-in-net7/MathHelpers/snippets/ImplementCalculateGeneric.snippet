<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Implement CalculateGeneric [step 1]</Title>
            <Description>Implement the CalculateGeneric class (file)</Description>
            <Shortcut>impl_calcgeneric_1</Shortcut>
            <SnippetTypes>
              <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Code Language="csharp">
                <![CDATA[using System.Numerics;
namespace MathHelpers;

internal static partial class CalculateGeneric
{
    internal static double StandardDeviation<T>(IEnumerable<T> values, bool isSample = true)
        where T : INumber<T>
    {
        int count = values.Count();
        if (count < 2) return 0;

        double accumulator = 0;

        foreach (var value in values)
        {
            double deviation = double.CreateChecked(value) - Mean(values);
            accumulator += deviation * deviation;
        }

        return Math.Sqrt(accumulator / (isSample ? count - 1 : count));

        double Mean(IEnumerable<T> values)
        {
            double sum = 0;
            foreach (var value in values) sum += double.CreateChecked(value);
            return sum / count;
        }
    }
}
]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>